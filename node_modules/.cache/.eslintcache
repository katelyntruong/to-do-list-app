[{"/Users/nhantruong/Downloads/app/src/index.js":"1","/Users/nhantruong/Downloads/app/src/app.js":"2","/Users/nhantruong/Downloads/app/src/comps/page.js":"3","/Users/nhantruong/Downloads/app/src/comps/dialog.js":"4","/Users/nhantruong/Downloads/app/src/comps/dateTime.js":"5"},{"size":233,"mtime":1643921948000,"results":"6","hashOfConfig":"7"},{"size":218,"mtime":1644018632000,"results":"8","hashOfConfig":"7"},{"size":7805,"mtime":1650401729395,"results":"9","hashOfConfig":"7"},{"size":7600,"mtime":1650402162730,"results":"10","hashOfConfig":"7"},{"size":917,"mtime":1650400472277,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11q27bc",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/Users/nhantruong/Downloads/app/src/index.js",[],"/Users/nhantruong/Downloads/app/src/app.js",[],"/Users/nhantruong/Downloads/app/src/comps/page.js",["25","26","27","28"],"//imports\r\n    //react\r\n        import React, { Component } from \"react\";\r\n    //materials\r\n        import Table from '@mui/material/Table';\r\n        import TableBody from '@mui/material/TableBody';\r\n        import TableCell from '@mui/material/TableCell';\r\n        import TableContainer from '@mui/material/TableContainer';\r\n        import TableHead from '@mui/material/TableHead';\r\n        import TableRow from '@mui/material/TableRow';\r\n        import Button from '@mui/material/Button';\r\n        import DiaWrap from '@mui/material/Dialog';\r\n        import Card from '@mui/material/Card';\r\n        import CardHeader from '@mui/material/CardHeader';\r\n        import CardContent from '@mui/material/CardContent';\r\n        import Checkbox from '@mui/material/Checkbox';\r\n    //components\r\n        import Dialog from './dialog';\r\n    //javascript\r\n        import moment from 'moment';\r\n        import toastr from 'toastr';\r\n        import { render } from \"@testing-library/react\";\r\n\r\n        function Row(row) {\r\n            let [checkbox, setCheckbox] = React.useState(false)\r\n            function handleChecked (e, checked) {\r\n                setCheckbox(checked)\r\n            }\r\n            return (\r\n                <TableRow key={row.title}>\r\n                    <TableCell align='center'>{row.title}</TableCell>\r\n                    <TableCell align=\"center\">{row.description}</TableCell>\r\n                    <TableCell align=\"center\">{row.deadline}</TableCell>\r\n                    <TableCell align=\"center\">{row.priority}</TableCell>\r\n                    <TableCell align=\"center\"><Checkbox label=\"checkbox\" value={checkbox} onChange = {handleChecked}/></TableCell>\r\n                    <TableCell align=\"center\">\r\n                        {!checkbox && <Button variant = \"contained\"  sx = {{width: 100, marginRight: '7px'}} onClick={() => row.updateTask(row)}>\r\n                            <i className = \"fa fa-edit\"></i>UPDATE\r\n                        </Button>}\r\n                        <Button variant = \"contained\"  sx = {{bgcolor: '#f44336',width: 100, marginRight: '7px'}} onClick={() => row.removeTask(row)}>\r\n                            <i className = \"fa fa-remove\"></i>DELETE\r\n                        </Button>\r\n                    </TableCell>\r\n                </TableRow>\r\n            )\r\n        }\r\n//master export\r\n    export default class page extends Component {\r\n    //constructor\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n                task: {\r\n                    deadline: moment()\r\n                },\r\n                rows: [],\r\n                open: false,\r\n                inputs: [\r\n                    {name: 'Title', value:'', error: ''},\r\n                    {name: 'Description', value:'', error: ''},\r\n                    {name: 'Priority', value:''}\r\n                ],\r\n                make : '',\r\n                chosenRow: ''\r\n            };\r\n        }\r\n\r\n    //add task\r\n        addTask(){\r\n            this.setState({open: true, make: 'Add', chosenRow:'', inputs : [{name: 'Title', value:'', error: ''},\r\n            {name: 'Description', value:'', error: ''},\r\n            {name: 'Priority', value:''}]});\r\n        };\r\n\r\n   //callback from dialog input\r\n        dialogCallback = (data) => {//functional syntax intentional\r\n            if(data.action === `submit`){//submitted\r\n                toastr.success(`Task ${this.state.make.toLowerCase()}ed successfully!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\r\n            }else if(data.action === `cancel`){//cancelled\r\n                this.setState({open: false});\r\n            }               \r\n        }\r\n        \r\n    //update a task\r\n        updateTask = (row) => {\r\n            this.setState({open: true, make: 'Edit', chosenRow: row, inputs: [\r\n                {name: 'Title', value:'', error: ''},\r\n                {name: 'Description', value:'', error: ''},\r\n                {name: 'Priority', value:''}\r\n            ]})\r\n        }\r\n    \r\n    //remove a task\r\n        removeTask = (row) => {\r\n            let rows = [...this.state.rows]\r\n            rows = rows.filter(item => item.description != row.description \r\n                                        && item.deadline != row.deadline\r\n                                        && item.priority != row.priority\r\n                )\r\n            this.setState({rows})\r\n            toastr.success(`Task deleted successfully!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\r\n        }\r\n        \r\n    //render\r\n        render() {\r\n            return (\r\n                <>\r\n                <DiaWrap\r\n                    open={this.state.open}\r\n                    onClose={() => this.dialogCallback()}>\r\n                    <Dialog \r\n                        parentCallback = {this.dialogCallback}\r\n                        dataFromParent = {this.state.task}\r\n                        dataInputs = {this.state.inputs}\r\n                        dataRows = {this.state.rows}\r\n                        dataRow = {this.state.chosenRow}\r\n                        dataMake = {this.state.make} >\r\n                    </Dialog>\r\n                </DiaWrap>\r\n                {/*master card*/}\r\n                    <Card sx = {{ margin: '20px' }}>\r\n                    {/*card header*/}\r\n                        <CardHeader sx = {{ bgcolor: 'primary.dark', color: 'white'}} \r\n                            title = {<><small><i className='fa fa-fw fa-bars'></i>FRAMEWORKS</small></>}\r\n                            style = {{textAlign: 'center'}}\r\n                            action = {\r\n                                <>\r\n                                {/*button*/}\r\n                                    <Button variant = \"contained\" onClick = {() => this.addTask()} sx = {{width: 100, marginRight: '7px'}}>\r\n                                        <i className = \"fa fa-fw fa-plus-circle\"></i>Add\r\n                                    </Button>\r\n                                </>\r\n                            }/>\r\n                     {/*card content*/}\r\n                        <CardContent sx = {{ bgcolor: 'white', marginBottom: -1 }}>\r\n                            <TableContainer>\r\n                                <Table sx = {{ bgcolor: 'white' }}>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\" sx = {{ width: 0.1, color: 'gray'}}>Title</TableCell>\r\n                                            <TableCell align=\"center\" sx = {{ width: 0.1, color: 'gray'}}>Description</TableCell>\r\n                                            <TableCell align=\"center\" sx = {{ width: 0.1, color: 'gray'}}>Deadline</TableCell>\r\n                                            <TableCell align=\"center\" sx = {{ width: 0.1, color: 'gray'}}>Priority</TableCell>\r\n                                            <TableCell align=\"center\" sx = {{ width: 0.1, color: 'gray'}}>Is Complete</TableCell>\r\n                                            <TableCell align=\"center\" sx = {{ width: 0.1, color: 'gray'}}>Action</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                    {this.state.rows.map((row, index) => (\r\n                                        <Row {...row} key = {index} updateTask={this.updateTask} removeTask={this.removeTask}/>\r\n                                    ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </CardContent>\r\n                    </Card>\r\n                </>\r\n            );\r\n        }\r\n    }      ",["29","30"],"/Users/nhantruong/Downloads/app/src/comps/dialog.js",["31","32","33","34","35","36","37","38","39","40","41","42","43","44","45"],"//imports\r\n    //react\r\n        import React from 'react';\r\n    //materials\r\n        import Button from '@mui/material/Button';\r\n        import DialogActions from '@mui/material/DialogActions';\r\n        import DialogContent from '@mui/material/DialogContent';\r\n        import DialogTitle from '@mui/material/DialogTitle';\r\n        import TextField from '@mui/material/TextField';\r\n        import Radio from '@mui/material/Radio';\r\n        import RadioGroup from '@mui/material/RadioGroup';\r\n        import FormControlLabel from '@mui/material/FormControlLabel';\r\n        import FormControl from '@mui/material/FormControl';\r\n        import FormLabel from '@mui/material/FormLabel';\r\n        //components\r\n        import DateTime from './dateTime';\r\n\r\n        function Icon(props) {\r\n            if (props.name == \"Add\") {\r\n                return <i className = \"fa fa-fw fa-plus-circle\"></i>\r\n            }\r\n            else {\r\n                return <i className = \"fa fa-edit\"></i>\r\n            }\r\n        }\r\n\r\n        \r\n//master export\r\n    export default function ResponsiveDialog(props) {\r\n    //variables\r\n        let [deadline, setDeadline] = React.useState(props.dataFromParent.deadline);\r\n        let [title, setTitle] = React.useState(props.dataFromParent.title || \"\");\r\n        let [inputs, setInputs] = React.useState(props.dataInputs);\r\n        let [rows, setRows] = React.useState(props.dataRows);\r\n        let [make, setMake] = React.useState(props.dataMake);\r\n        let [row, setRow] = React.useState(props.dataRow)\r\n\r\n        let updateDate = (data) => { \r\n            setDeadline(data.datePicked)\r\n        }\r\n    //cancel\r\n        let cancel = () => {\r\n            props.parentCallback({\r\n                action: 'cancel',\r\n                data: {}\r\n            });\r\n        };\r\n    //add\r\n        let add = () => {\r\n            props.parentCallback({\r\n                action: 'submit',\r\n                data: {}\r\n            });\r\n        }   \r\n\r\n        let handleInputChange = (idx, event) => {\r\n            const value = event.target.value;\r\n\r\n            if (idx == 0 || idx == 1) {\r\n                const name = event.target.placeholder;\r\n                let error = '';\r\n                if (!value.match(/^[a-zA-Z]+$/)) {\r\n                    error = `${name} is Required!`\r\n                }\r\n                inputs[idx] = {...inputs[idx], value: value, error: error}\r\n            }\r\n            else {\r\n                inputs[idx] = {...inputs[idx], value: value}\r\n            }\r\n            setInputs (prevInputs => {\r\n                return {...prevInputs}\r\n            })\r\n        }\r\n\r\n        let handleDialogAdd = (event) => {\r\n            let errorDup = '';\r\n            let duplicated = false\r\n            if (make == \"Add\") {\r\n                rows.map((row) => {\r\n                    if (row.title == inputs[0].value) {\r\n                        duplicated = true\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                inputs[0] = {...inputs[0], value: row && row.title}\r\n                inputs[1] = {...inputs[1], value: row && row.description}\r\n                setInputs (prevInputs => {\r\n                    return {...prevInputs}\r\n                })\r\n            }\r\n            if (inputs[0].value == '') {\r\n                inputs[0] = {...inputs[0], error: 'Title is Required!'}\r\n                if (inputs[1].value == '') {\r\n                    inputs[1] = {...inputs[1], error: 'Description is Required!'}\r\n                }\r\n                setInputs (prevInputs => {\r\n                    return {...prevInputs}\r\n                })\r\n            }\r\n            else if (duplicated) {\r\n                errorDup = `${inputs[0].name} is duplicated!`\r\n                inputs[0] = {...inputs[0], error: errorDup}\r\n                setInputs (prevInputs => {\r\n                    return {...prevInputs}\r\n                })\r\n            }\r\n            else {\r\n                if (make == \"Add\") {\r\n                    rows.push({title: inputs[0].value,\r\n                        description: inputs[1].value,\r\n                        deadline: deadline.format(\"MM/DD/YYYY\"),\r\n                        priority: inputs[2].value});\r\n                    setRows (prevRows => {\r\n                        return {...prevRows}\r\n                    })\r\n                }\r\n                else {\r\n                    row = {title: inputs[0].value,\r\n                        description: inputs[1].value,\r\n                        deadline: deadline.format(\"MM/DD/YYYY\"),\r\n                        priority: inputs[2].value}\r\n                    setRow (prevRows => {\r\n                        return {...prevRows}\r\n                    })\r\n                    setRows (prevRows => {\r\n                        return {...prevRows}\r\n                    })\r\n                }\r\n                add()\r\n                cancel()\r\n            }\r\n            \r\n        }\r\n\r\n    //return master object\r\n        return (\r\n            <>       \r\n            {/*title*/}\r\n               <DialogTitle sx = {{ bgcolor: 'primary.dark', color: 'white'}}>\r\n                    <Icon name={make}/>{make} Task\r\n                </DialogTitle>\r\n            {/*content*/}\r\n                <DialogContent>\r\n                    {make == 'Add' && <br />}\r\n                    {make == 'Add' && <TextField  placeholder={inputs[0].name} sx={{width: 1}} onChange={(e) => handleInputChange(0, e)}/>}\r\n                    {inputs[0].error && <div style={{ color: \"red\", padding: \"3px 0 0 12px\"}}>{inputs[0].error} </div> }\r\n                    <br /><br />\r\n                    <TextField  placeholder={inputs[1].name} defaultValue={row && row.description} sx={{width: 1}} onChange={(e) => handleInputChange(1, e)}/>\r\n                    {inputs[1].error && <div style={{ color: \"red\", padding: \"3px 0 0 12px\"}}>{inputs[1].error}</div> }\r\n                {/*deadline*/}\r\n                    <br /><br />\r\n                    <DateTime dataFromParent = {deadline} dataToParent = {updateDate}/>\r\n                    <br /><br />\r\n                    <FormLabel id=\"demo-row-radio-buttons-group-label\">Priority</FormLabel>\r\n                        <RadioGroup\r\n                            row\r\n                            aria-labelledby=\"demo-row-radio-buttons-group-label\"\r\n                            name=\"row-radio-buttons-group\"\r\n                            defaultValue={row && row.priority}\r\n                        >\r\n                            <FormControlLabel value=\"low\" control={<Radio />} label=\"Low\" onChange={(e) => handleInputChange(2, e)}/>\r\n                            <FormControlLabel value=\"med\" control={<Radio />} label=\"Med\" onChange={(e) => handleInputChange(2, e)}/>\r\n                            <FormControlLabel value=\"high\" control={<Radio />} label=\"High\" onChange={(e) => handleInputChange(2, e)}/>\r\n                        </RadioGroup>\r\n                </DialogContent>\r\n            {/*action buttons*/}\r\n                <DialogActions sx={{ bgcolor: 'white'}}>\r\n                        {<Button  variant = \"contained\"  sx = {{bgcolor: 'primary.dark', width: 100}} onClick={(e) => handleDialogAdd(e)}>\r\n                        <Icon name={make}/>{make}\r\n                        </Button>}\r\n                    {/*cancel button*/}\r\n                        <Button onClick = {cancel} variant = \"contained\" color = 'error' sx = {{bgcolor: '#f44336', width: 100}}>\r\n                        <i className = \"fa fa-fw fa-ban\"></i>&nbsp;Cancel\r\n                        </Button>\r\n                </DialogActions>\r\n            </>\r\n        );\r\n    }","/Users/nhantruong/Downloads/app/src/comps/dateTime.js",[],{"ruleId":"46","severity":1,"message":"47","line":22,"column":18,"nodeType":"48","messageId":"49","endLine":22,"endColumn":24},{"ruleId":"50","severity":1,"message":"51","line":96,"column":57,"nodeType":"52","messageId":"53","endLine":96,"endColumn":59},{"ruleId":"50","severity":1,"message":"51","line":97,"column":58,"nodeType":"52","messageId":"53","endLine":97,"endColumn":60},{"ruleId":"50","severity":1,"message":"51","line":98,"column":58,"nodeType":"52","messageId":"53","endLine":98,"endColumn":60},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"46","severity":1,"message":"58","line":13,"column":16,"nodeType":"48","messageId":"49","endLine":13,"endColumn":27},{"ruleId":"50","severity":1,"message":"59","line":19,"column":28,"nodeType":"52","messageId":"53","endLine":19,"endColumn":30},{"ruleId":"46","severity":1,"message":"60","line":32,"column":14,"nodeType":"48","messageId":"49","endLine":32,"endColumn":19},{"ruleId":"46","severity":1,"message":"61","line":32,"column":21,"nodeType":"48","messageId":"49","endLine":32,"endColumn":29},{"ruleId":"46","severity":1,"message":"62","line":35,"column":20,"nodeType":"48","messageId":"49","endLine":35,"endColumn":27},{"ruleId":"50","severity":1,"message":"59","line":59,"column":21,"nodeType":"52","messageId":"53","endLine":59,"endColumn":23},{"ruleId":"50","severity":1,"message":"59","line":59,"column":33,"nodeType":"52","messageId":"53","endLine":59,"endColumn":35},{"ruleId":"50","severity":1,"message":"59","line":78,"column":22,"nodeType":"52","messageId":"53","endLine":78,"endColumn":24},{"ruleId":"63","severity":1,"message":"64","line":79,"column":32,"nodeType":"65","messageId":"66","endLine":79,"endColumn":34},{"ruleId":"50","severity":1,"message":"59","line":80,"column":35,"nodeType":"52","messageId":"53","endLine":80,"endColumn":37},{"ruleId":"50","severity":1,"message":"59","line":92,"column":33,"nodeType":"52","messageId":"53","endLine":92,"endColumn":35},{"ruleId":"50","severity":1,"message":"59","line":94,"column":37,"nodeType":"52","messageId":"53","endLine":94,"endColumn":39},{"ruleId":"50","severity":1,"message":"59","line":109,"column":26,"nodeType":"52","messageId":"53","endLine":109,"endColumn":28},{"ruleId":"50","severity":1,"message":"59","line":145,"column":27,"nodeType":"52","messageId":"53","endLine":145,"endColumn":29},{"ruleId":"50","severity":1,"message":"59","line":146,"column":27,"nodeType":"52","messageId":"53","endLine":146,"endColumn":29},"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["67"],"no-negated-in-lhs",["68"],"'FormControl' is defined but never used.","Expected '===' and instead saw '=='.","'title' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'setMake' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]